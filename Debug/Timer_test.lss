
Timer_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001244  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800060  00800060  000012b8  2**0
                  ALLOC
  2 .stab         00001860  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000943  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__vector_4>
      14:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__vector_5>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_10>
      2c:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 36       	cpi	r26, 0x69	; 105
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <main>
      74:	0c 94 20 09 	jmp	0x1240	; 0x1240 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDircection>:
 * Set Pin direction from any port
 * INPUT : PORT name , PIN number , (OUTPUT or INPUT)
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPinDircection(uint8_t PORT , uint8_t PIN , uint8_t Mode)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
      84:	2a 97       	sbiw	r28, 0x0a	; 10
      86:	0f b6       	in	r0, 0x3f	; 63
      88:	f8 94       	cli
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	0f be       	out	0x3f, r0	; 63
      8e:	cd bf       	out	0x3d, r28	; 61
      90:	89 83       	std	Y+1, r24	; 0x01
      92:	6a 83       	std	Y+2, r22	; 0x02
      94:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN >7)
      96:	8a 81       	ldd	r24, Y+2	; 0x02
      98:	88 30       	cpi	r24, 0x08	; 8
      9a:	18 f0       	brcs	.+6      	; 0xa2 <DIO_SetPinDircection+0x26>
	{
		return -1;
      9c:	2f ef       	ldi	r18, 0xFF	; 255
      9e:	2a 87       	std	Y+10, r18	; 0x0a
      a0:	d1 c1       	rjmp	.+930    	; 0x444 <DIO_SetPinDircection+0x3c8>
	}
	else
	{
		if(Mode == OUTPUT)
      a2:	8b 81       	ldd	r24, Y+3	; 0x03
      a4:	81 30       	cpi	r24, 0x01	; 1
      a6:	09 f0       	breq	.+2      	; 0xaa <DIO_SetPinDircection+0x2e>
      a8:	7b c0       	rjmp	.+246    	; 0x1a0 <DIO_SetPinDircection+0x124>
		{
			switch(PORT)
      aa:	89 81       	ldd	r24, Y+1	; 0x01
      ac:	28 2f       	mov	r18, r24
      ae:	30 e0       	ldi	r19, 0x00	; 0
      b0:	39 87       	std	Y+9, r19	; 0x09
      b2:	28 87       	std	Y+8, r18	; 0x08
      b4:	88 85       	ldd	r24, Y+8	; 0x08
      b6:	99 85       	ldd	r25, Y+9	; 0x09
      b8:	82 30       	cpi	r24, 0x02	; 2
      ba:	91 05       	cpc	r25, r1
      bc:	69 f1       	breq	.+90     	; 0x118 <DIO_SetPinDircection+0x9c>
      be:	28 85       	ldd	r18, Y+8	; 0x08
      c0:	39 85       	ldd	r19, Y+9	; 0x09
      c2:	23 30       	cpi	r18, 0x03	; 3
      c4:	31 05       	cpc	r19, r1
      c6:	34 f4       	brge	.+12     	; 0xd4 <DIO_SetPinDircection+0x58>
      c8:	88 85       	ldd	r24, Y+8	; 0x08
      ca:	99 85       	ldd	r25, Y+9	; 0x09
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	69 f0       	breq	.+26     	; 0xec <DIO_SetPinDircection+0x70>
      d2:	63 c0       	rjmp	.+198    	; 0x19a <DIO_SetPinDircection+0x11e>
      d4:	28 85       	ldd	r18, Y+8	; 0x08
      d6:	39 85       	ldd	r19, Y+9	; 0x09
      d8:	23 30       	cpi	r18, 0x03	; 3
      da:	31 05       	cpc	r19, r1
      dc:	91 f1       	breq	.+100    	; 0x142 <DIO_SetPinDircection+0xc6>
      de:	88 85       	ldd	r24, Y+8	; 0x08
      e0:	99 85       	ldd	r25, Y+9	; 0x09
      e2:	84 30       	cpi	r24, 0x04	; 4
      e4:	91 05       	cpc	r25, r1
      e6:	09 f4       	brne	.+2      	; 0xea <DIO_SetPinDircection+0x6e>
      e8:	42 c0       	rjmp	.+132    	; 0x16e <DIO_SetPinDircection+0xf2>
      ea:	57 c0       	rjmp	.+174    	; 0x19a <DIO_SetPinDircection+0x11e>
					{
					case PORTA:
						SET_BIT(DIO_DDRA,PIN);
      ec:	aa e3       	ldi	r26, 0x3A	; 58
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	ea e3       	ldi	r30, 0x3A	; 58
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	48 2f       	mov	r20, r24
      f8:	8a 81       	ldd	r24, Y+2	; 0x02
      fa:	28 2f       	mov	r18, r24
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	02 2e       	mov	r0, r18
     104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPinDircection+0x8e>
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	0a 94       	dec	r0
     10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPinDircection+0x8a>
     10e:	84 2b       	or	r24, r20
     110:	8c 93       	st	X, r24
						return 1;
     112:	91 e0       	ldi	r25, 0x01	; 1
     114:	9a 87       	std	Y+10, r25	; 0x0a
     116:	96 c1       	rjmp	.+812    	; 0x444 <DIO_SetPinDircection+0x3c8>
						break;
					case PORTB:
						SET_BIT(DIO_DDRB,PIN);
     118:	a7 e3       	ldi	r26, 0x37	; 55
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	e7 e3       	ldi	r30, 0x37	; 55
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	48 2f       	mov	r20, r24
     124:	8a 81       	ldd	r24, Y+2	; 0x02
     126:	28 2f       	mov	r18, r24
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_SetPinDircection+0xb8>
     130:	88 0f       	add	r24, r24
     132:	99 1f       	adc	r25, r25
     134:	2a 95       	dec	r18
     136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_SetPinDircection+0xb4>
     138:	84 2b       	or	r24, r20
     13a:	8c 93       	st	X, r24
						return 1;
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	2a 87       	std	Y+10, r18	; 0x0a
     140:	81 c1       	rjmp	.+770    	; 0x444 <DIO_SetPinDircection+0x3c8>
						break;
					case PORTC:
						SET_BIT(DIO_DDRC,PIN);
     142:	a4 e3       	ldi	r26, 0x34	; 52
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	e4 e3       	ldi	r30, 0x34	; 52
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	48 2f       	mov	r20, r24
     14e:	8a 81       	ldd	r24, Y+2	; 0x02
     150:	28 2f       	mov	r18, r24
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	02 2e       	mov	r0, r18
     15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_SetPinDircection+0xe4>
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	0a 94       	dec	r0
     162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_SetPinDircection+0xe0>
     164:	84 2b       	or	r24, r20
     166:	8c 93       	st	X, r24
						return 1;
     168:	31 e0       	ldi	r19, 0x01	; 1
     16a:	3a 87       	std	Y+10, r19	; 0x0a
     16c:	6b c1       	rjmp	.+726    	; 0x444 <DIO_SetPinDircection+0x3c8>
						break;
					case PORTD:
						SET_BIT(DIO_DDRD,PIN);
     16e:	a1 e3       	ldi	r26, 0x31	; 49
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	e1 e3       	ldi	r30, 0x31	; 49
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	48 2f       	mov	r20, r24
     17a:	8a 81       	ldd	r24, Y+2	; 0x02
     17c:	28 2f       	mov	r18, r24
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	02 2e       	mov	r0, r18
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPinDircection+0x110>
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	0a 94       	dec	r0
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPinDircection+0x10c>
     190:	84 2b       	or	r24, r20
     192:	8c 93       	st	X, r24
						return 1;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	8a 87       	std	Y+10, r24	; 0x0a
     198:	55 c1       	rjmp	.+682    	; 0x444 <DIO_SetPinDircection+0x3c8>
						break;
					default:
						return -2;
     19a:	9e ef       	ldi	r25, 0xFE	; 254
     19c:	9a 87       	std	Y+10, r25	; 0x0a
     19e:	52 c1       	rjmp	.+676    	; 0x444 <DIO_SetPinDircection+0x3c8>
					}
		}
		else if( Mode == INPUT)
     1a0:	8b 81       	ldd	r24, Y+3	; 0x03
     1a2:	88 23       	and	r24, r24
     1a4:	09 f0       	breq	.+2      	; 0x1a8 <DIO_SetPinDircection+0x12c>
     1a6:	7f c0       	rjmp	.+254    	; 0x2a6 <DIO_SetPinDircection+0x22a>
			{
			switch(PORT)
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	28 2f       	mov	r18, r24
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	3f 83       	std	Y+7, r19	; 0x07
     1b0:	2e 83       	std	Y+6, r18	; 0x06
     1b2:	8e 81       	ldd	r24, Y+6	; 0x06
     1b4:	9f 81       	ldd	r25, Y+7	; 0x07
     1b6:	82 30       	cpi	r24, 0x02	; 2
     1b8:	91 05       	cpc	r25, r1
     1ba:	71 f1       	breq	.+92     	; 0x218 <DIO_SetPinDircection+0x19c>
     1bc:	2e 81       	ldd	r18, Y+6	; 0x06
     1be:	3f 81       	ldd	r19, Y+7	; 0x07
     1c0:	23 30       	cpi	r18, 0x03	; 3
     1c2:	31 05       	cpc	r19, r1
     1c4:	34 f4       	brge	.+12     	; 0x1d2 <DIO_SetPinDircection+0x156>
     1c6:	8e 81       	ldd	r24, Y+6	; 0x06
     1c8:	9f 81       	ldd	r25, Y+7	; 0x07
     1ca:	81 30       	cpi	r24, 0x01	; 1
     1cc:	91 05       	cpc	r25, r1
     1ce:	69 f0       	breq	.+26     	; 0x1ea <DIO_SetPinDircection+0x16e>
     1d0:	67 c0       	rjmp	.+206    	; 0x2a0 <DIO_SetPinDircection+0x224>
     1d2:	2e 81       	ldd	r18, Y+6	; 0x06
     1d4:	3f 81       	ldd	r19, Y+7	; 0x07
     1d6:	23 30       	cpi	r18, 0x03	; 3
     1d8:	31 05       	cpc	r19, r1
     1da:	a1 f1       	breq	.+104    	; 0x244 <DIO_SetPinDircection+0x1c8>
     1dc:	8e 81       	ldd	r24, Y+6	; 0x06
     1de:	9f 81       	ldd	r25, Y+7	; 0x07
     1e0:	84 30       	cpi	r24, 0x04	; 4
     1e2:	91 05       	cpc	r25, r1
     1e4:	09 f4       	brne	.+2      	; 0x1e8 <DIO_SetPinDircection+0x16c>
     1e6:	45 c0       	rjmp	.+138    	; 0x272 <DIO_SetPinDircection+0x1f6>
     1e8:	5b c0       	rjmp	.+182    	; 0x2a0 <DIO_SetPinDircection+0x224>
				{
			case PORTA:
				CLR_BIT(DIO_DDRA,PIN);
     1ea:	aa e3       	ldi	r26, 0x3A	; 58
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	ea e3       	ldi	r30, 0x3A	; 58
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	48 2f       	mov	r20, r24
     1f6:	8a 81       	ldd	r24, Y+2	; 0x02
     1f8:	28 2f       	mov	r18, r24
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	02 2e       	mov	r0, r18
     202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_SetPinDircection+0x18c>
     204:	88 0f       	add	r24, r24
     206:	99 1f       	adc	r25, r25
     208:	0a 94       	dec	r0
     20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_SetPinDircection+0x188>
     20c:	80 95       	com	r24
     20e:	84 23       	and	r24, r20
     210:	8c 93       	st	X, r24
					return 1;
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	9a 87       	std	Y+10, r25	; 0x0a
     216:	16 c1       	rjmp	.+556    	; 0x444 <DIO_SetPinDircection+0x3c8>
					break;
			case PORTB:
				CLR_BIT(DIO_DDRB,PIN);
     218:	a7 e3       	ldi	r26, 0x37	; 55
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	e7 e3       	ldi	r30, 0x37	; 55
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	48 2f       	mov	r20, r24
     224:	8a 81       	ldd	r24, Y+2	; 0x02
     226:	28 2f       	mov	r18, r24
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SetPinDircection+0x1b8>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	2a 95       	dec	r18
     236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SetPinDircection+0x1b4>
     238:	80 95       	com	r24
     23a:	84 23       	and	r24, r20
     23c:	8c 93       	st	X, r24
					return 1;
     23e:	21 e0       	ldi	r18, 0x01	; 1
     240:	2a 87       	std	Y+10, r18	; 0x0a
     242:	00 c1       	rjmp	.+512    	; 0x444 <DIO_SetPinDircection+0x3c8>
					break;
			case PORTC:
				CLR_BIT(DIO_DDRC,PIN);
     244:	a4 e3       	ldi	r26, 0x34	; 52
     246:	b0 e0       	ldi	r27, 0x00	; 0
     248:	e4 e3       	ldi	r30, 0x34	; 52
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	48 2f       	mov	r20, r24
     250:	8a 81       	ldd	r24, Y+2	; 0x02
     252:	28 2f       	mov	r18, r24
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	02 2e       	mov	r0, r18
     25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_SetPinDircection+0x1e6>
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	0a 94       	dec	r0
     264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_SetPinDircection+0x1e2>
     266:	80 95       	com	r24
     268:	84 23       	and	r24, r20
     26a:	8c 93       	st	X, r24
					return 1;
     26c:	31 e0       	ldi	r19, 0x01	; 1
     26e:	3a 87       	std	Y+10, r19	; 0x0a
     270:	e9 c0       	rjmp	.+466    	; 0x444 <DIO_SetPinDircection+0x3c8>
					break;
			case PORTD:
				CLR_BIT(DIO_DDRD,PIN);
     272:	a1 e3       	ldi	r26, 0x31	; 49
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	e1 e3       	ldi	r30, 0x31	; 49
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	48 2f       	mov	r20, r24
     27e:	8a 81       	ldd	r24, Y+2	; 0x02
     280:	28 2f       	mov	r18, r24
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	02 2e       	mov	r0, r18
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPinDircection+0x214>
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	0a 94       	dec	r0
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPinDircection+0x210>
     294:	80 95       	com	r24
     296:	84 23       	and	r24, r20
     298:	8c 93       	st	X, r24
					return 1;
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	8a 87       	std	Y+10, r24	; 0x0a
     29e:	d2 c0       	rjmp	.+420    	; 0x444 <DIO_SetPinDircection+0x3c8>
					break;
			default:
					return -2;
     2a0:	9e ef       	ldi	r25, 0xFE	; 254
     2a2:	9a 87       	std	Y+10, r25	; 0x0a
     2a4:	cf c0       	rjmp	.+414    	; 0x444 <DIO_SetPinDircection+0x3c8>
				}
			}
		else if (Mode == INPUT_PULLUP)
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
     2a8:	82 30       	cpi	r24, 0x02	; 2
     2aa:	09 f0       	breq	.+2      	; 0x2ae <DIO_SetPinDircection+0x232>
     2ac:	c9 c0       	rjmp	.+402    	; 0x440 <DIO_SetPinDircection+0x3c4>
		{
			switch(PORT)
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	28 2f       	mov	r18, r24
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	3d 83       	std	Y+5, r19	; 0x05
     2b6:	2c 83       	std	Y+4, r18	; 0x04
     2b8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ba:	9d 81       	ldd	r25, Y+5	; 0x05
     2bc:	82 30       	cpi	r24, 0x02	; 2
     2be:	91 05       	cpc	r25, r1
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <DIO_SetPinDircection+0x248>
     2c2:	41 c0       	rjmp	.+130    	; 0x346 <DIO_SetPinDircection+0x2ca>
     2c4:	2c 81       	ldd	r18, Y+4	; 0x04
     2c6:	3d 81       	ldd	r19, Y+5	; 0x05
     2c8:	23 30       	cpi	r18, 0x03	; 3
     2ca:	31 05       	cpc	r19, r1
     2cc:	34 f4       	brge	.+12     	; 0x2da <DIO_SetPinDircection+0x25e>
     2ce:	8c 81       	ldd	r24, Y+4	; 0x04
     2d0:	9d 81       	ldd	r25, Y+5	; 0x05
     2d2:	81 30       	cpi	r24, 0x01	; 1
     2d4:	91 05       	cpc	r25, r1
     2d6:	71 f0       	breq	.+28     	; 0x2f4 <DIO_SetPinDircection+0x278>
     2d8:	b0 c0       	rjmp	.+352    	; 0x43a <DIO_SetPinDircection+0x3be>
     2da:	2c 81       	ldd	r18, Y+4	; 0x04
     2dc:	3d 81       	ldd	r19, Y+5	; 0x05
     2de:	23 30       	cpi	r18, 0x03	; 3
     2e0:	31 05       	cpc	r19, r1
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <DIO_SetPinDircection+0x26a>
     2e4:	58 c0       	rjmp	.+176    	; 0x396 <DIO_SetPinDircection+0x31a>
     2e6:	8c 81       	ldd	r24, Y+4	; 0x04
     2e8:	9d 81       	ldd	r25, Y+5	; 0x05
     2ea:	84 30       	cpi	r24, 0x04	; 4
     2ec:	91 05       	cpc	r25, r1
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <DIO_SetPinDircection+0x276>
     2f0:	7b c0       	rjmp	.+246    	; 0x3e8 <DIO_SetPinDircection+0x36c>
     2f2:	a3 c0       	rjmp	.+326    	; 0x43a <DIO_SetPinDircection+0x3be>
							{
						case PORTA:
							CLR_BIT(DIO_DDRA,PIN);
     2f4:	aa e3       	ldi	r26, 0x3A	; 58
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	ea e3       	ldi	r30, 0x3A	; 58
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	48 2f       	mov	r20, r24
     300:	8a 81       	ldd	r24, Y+2	; 0x02
     302:	28 2f       	mov	r18, r24
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPinDircection+0x294>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	2a 95       	dec	r18
     312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPinDircection+0x290>
     314:	80 95       	com	r24
     316:	84 23       	and	r24, r20
     318:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTA,PIN);
     31a:	ab e3       	ldi	r26, 0x3B	; 59
     31c:	b0 e0       	ldi	r27, 0x00	; 0
     31e:	eb e3       	ldi	r30, 0x3B	; 59
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	80 81       	ld	r24, Z
     324:	48 2f       	mov	r20, r24
     326:	8a 81       	ldd	r24, Y+2	; 0x02
     328:	28 2f       	mov	r18, r24
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	02 2e       	mov	r0, r18
     332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_SetPinDircection+0x2bc>
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	0a 94       	dec	r0
     33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_SetPinDircection+0x2b8>
     33c:	84 2b       	or	r24, r20
     33e:	8c 93       	st	X, r24
								return 1;
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	9a 87       	std	Y+10, r25	; 0x0a
     344:	7f c0       	rjmp	.+254    	; 0x444 <DIO_SetPinDircection+0x3c8>
								break;
						case PORTB:
							CLR_BIT(DIO_DDRB,PIN);
     346:	a7 e3       	ldi	r26, 0x37	; 55
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	e7 e3       	ldi	r30, 0x37	; 55
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	48 2f       	mov	r20, r24
     352:	8a 81       	ldd	r24, Y+2	; 0x02
     354:	28 2f       	mov	r18, r24
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_SetPinDircection+0x2e6>
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	2a 95       	dec	r18
     364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_SetPinDircection+0x2e2>
     366:	80 95       	com	r24
     368:	84 23       	and	r24, r20
     36a:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTB,PIN);
     36c:	a8 e3       	ldi	r26, 0x38	; 56
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	e8 e3       	ldi	r30, 0x38	; 56
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	48 2f       	mov	r20, r24
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	28 2f       	mov	r18, r24
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_SetPinDircection+0x30c>
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	2a 95       	dec	r18
     38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_SetPinDircection+0x308>
     38c:	84 2b       	or	r24, r20
     38e:	8c 93       	st	X, r24
								return 1;
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	2a 87       	std	Y+10, r18	; 0x0a
     394:	57 c0       	rjmp	.+174    	; 0x444 <DIO_SetPinDircection+0x3c8>
								break;
						case PORTC:
							CLR_BIT(DIO_DDRC,PIN);
     396:	a4 e3       	ldi	r26, 0x34	; 52
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e4 e3       	ldi	r30, 0x34	; 52
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	48 2f       	mov	r20, r24
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02
     3a4:	28 2f       	mov	r18, r24
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_SetPinDircection+0x336>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	2a 95       	dec	r18
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_SetPinDircection+0x332>
     3b6:	80 95       	com	r24
     3b8:	84 23       	and	r24, r20
     3ba:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTC,PIN);
     3bc:	a5 e3       	ldi	r26, 0x35	; 53
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	e5 e3       	ldi	r30, 0x35	; 53
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	48 2f       	mov	r20, r24
     3c8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	02 2e       	mov	r0, r18
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_SetPinDircection+0x35e>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	0a 94       	dec	r0
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_SetPinDircection+0x35a>
     3de:	84 2b       	or	r24, r20
     3e0:	8c 93       	st	X, r24
								return 1;
     3e2:	31 e0       	ldi	r19, 0x01	; 1
     3e4:	3a 87       	std	Y+10, r19	; 0x0a
     3e6:	2e c0       	rjmp	.+92     	; 0x444 <DIO_SetPinDircection+0x3c8>
								break;
						case PORTD:
							CLR_BIT(DIO_DDRD,PIN);
     3e8:	a1 e3       	ldi	r26, 0x31	; 49
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	e1 e3       	ldi	r30, 0x31	; 49
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	48 2f       	mov	r20, r24
     3f4:	8a 81       	ldd	r24, Y+2	; 0x02
     3f6:	28 2f       	mov	r18, r24
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_SetPinDircection+0x388>
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	2a 95       	dec	r18
     406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_SetPinDircection+0x384>
     408:	80 95       	com	r24
     40a:	84 23       	and	r24, r20
     40c:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTD,PIN);
     40e:	a2 e3       	ldi	r26, 0x32	; 50
     410:	b0 e0       	ldi	r27, 0x00	; 0
     412:	e2 e3       	ldi	r30, 0x32	; 50
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	48 2f       	mov	r20, r24
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	28 2f       	mov	r18, r24
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	02 2e       	mov	r0, r18
     426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_SetPinDircection+0x3b0>
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	0a 94       	dec	r0
     42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_SetPinDircection+0x3ac>
     430:	84 2b       	or	r24, r20
     432:	8c 93       	st	X, r24
								return 1;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	8a 87       	std	Y+10, r24	; 0x0a
     438:	05 c0       	rjmp	.+10     	; 0x444 <DIO_SetPinDircection+0x3c8>
								break;
						default:
								return -2;
     43a:	9e ef       	ldi	r25, 0xFE	; 254
     43c:	9a 87       	std	Y+10, r25	; 0x0a
     43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_SetPinDircection+0x3c8>
							}
		}
		else
		{
			return -3;
     440:	2d ef       	ldi	r18, 0xFD	; 253
     442:	2a 87       	std	Y+10, r18	; 0x0a
     444:	8a 85       	ldd	r24, Y+10	; 0x0a
		}
	}
}
     446:	2a 96       	adiw	r28, 0x0a	; 10
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
     452:	cf 91       	pop	r28
     454:	df 91       	pop	r29
     456:	08 95       	ret

00000458 <DIO_SetPortDirection>:
 * Set Port direction
 * INPUT : PORT name , (OUTPUT or INPUT)
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPortDirection(uint8_t PORT, uint8_t Mode)
{
     458:	df 93       	push	r29
     45a:	cf 93       	push	r28
     45c:	00 d0       	rcall	.+0      	; 0x45e <DIO_SetPortDirection+0x6>
     45e:	00 d0       	rcall	.+0      	; 0x460 <DIO_SetPortDirection+0x8>
     460:	0f 92       	push	r0
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	89 83       	std	Y+1, r24	; 0x01
     468:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT)
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	28 2f       	mov	r18, r24
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	3d 83       	std	Y+5, r19	; 0x05
     472:	2c 83       	std	Y+4, r18	; 0x04
     474:	8c 81       	ldd	r24, Y+4	; 0x04
     476:	9d 81       	ldd	r25, Y+5	; 0x05
     478:	82 30       	cpi	r24, 0x02	; 2
     47a:	91 05       	cpc	r25, r1
     47c:	69 f1       	breq	.+90     	; 0x4d8 <DIO_SetPortDirection+0x80>
     47e:	2c 81       	ldd	r18, Y+4	; 0x04
     480:	3d 81       	ldd	r19, Y+5	; 0x05
     482:	23 30       	cpi	r18, 0x03	; 3
     484:	31 05       	cpc	r19, r1
     486:	34 f4       	brge	.+12     	; 0x494 <DIO_SetPortDirection+0x3c>
     488:	8c 81       	ldd	r24, Y+4	; 0x04
     48a:	9d 81       	ldd	r25, Y+5	; 0x05
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	91 05       	cpc	r25, r1
     490:	69 f0       	breq	.+26     	; 0x4ac <DIO_SetPortDirection+0x54>
     492:	64 c0       	rjmp	.+200    	; 0x55c <DIO_SetPortDirection+0x104>
     494:	2c 81       	ldd	r18, Y+4	; 0x04
     496:	3d 81       	ldd	r19, Y+5	; 0x05
     498:	23 30       	cpi	r18, 0x03	; 3
     49a:	31 05       	cpc	r19, r1
     49c:	99 f1       	breq	.+102    	; 0x504 <DIO_SetPortDirection+0xac>
     49e:	8c 81       	ldd	r24, Y+4	; 0x04
     4a0:	9d 81       	ldd	r25, Y+5	; 0x05
     4a2:	84 30       	cpi	r24, 0x04	; 4
     4a4:	91 05       	cpc	r25, r1
     4a6:	09 f4       	brne	.+2      	; 0x4aa <DIO_SetPortDirection+0x52>
     4a8:	43 c0       	rjmp	.+134    	; 0x530 <DIO_SetPortDirection+0xd8>
     4aa:	58 c0       	rjmp	.+176    	; 0x55c <DIO_SetPortDirection+0x104>
	{
	case PORTA:
		if(Mode == OUTPUT)
     4ac:	8a 81       	ldd	r24, Y+2	; 0x02
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	39 f4       	brne	.+14     	; 0x4c0 <DIO_SetPortDirection+0x68>
		{
			DIO_DDRA =0xff;
     4b2:	ea e3       	ldi	r30, 0x3A	; 58
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	8f ef       	ldi	r24, 0xFF	; 255
     4b8:	80 83       	st	Z, r24
			return 1;
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	9b 83       	std	Y+3, r25	; 0x03
     4be:	50 c0       	rjmp	.+160    	; 0x560 <DIO_SetPortDirection+0x108>
		}
		else if (Mode == INPUT)
     4c0:	8a 81       	ldd	r24, Y+2	; 0x02
     4c2:	88 23       	and	r24, r24
     4c4:	31 f4       	brne	.+12     	; 0x4d2 <DIO_SetPortDirection+0x7a>
		{
			DIO_DDRA = 0x00;
     4c6:	ea e3       	ldi	r30, 0x3A	; 58
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	10 82       	st	Z, r1
			return 1;
     4cc:	21 e0       	ldi	r18, 0x01	; 1
     4ce:	2b 83       	std	Y+3, r18	; 0x03
     4d0:	47 c0       	rjmp	.+142    	; 0x560 <DIO_SetPortDirection+0x108>
		}
		else
			return -1;
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	3b 83       	std	Y+3, r19	; 0x03
     4d6:	44 c0       	rjmp	.+136    	; 0x560 <DIO_SetPortDirection+0x108>
		break;
	case PORTB:
			if(Mode == OUTPUT)
     4d8:	8a 81       	ldd	r24, Y+2	; 0x02
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	39 f4       	brne	.+14     	; 0x4ec <DIO_SetPortDirection+0x94>
			{
				DIO_DDRB =0xff;
     4de:	e7 e3       	ldi	r30, 0x37	; 55
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	80 83       	st	Z, r24
				return 1;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	8b 83       	std	Y+3, r24	; 0x03
     4ea:	3a c0       	rjmp	.+116    	; 0x560 <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
     4ec:	8a 81       	ldd	r24, Y+2	; 0x02
     4ee:	88 23       	and	r24, r24
     4f0:	31 f4       	brne	.+12     	; 0x4fe <DIO_SetPortDirection+0xa6>
			{
				DIO_DDRB = 0x00;
     4f2:	e7 e3       	ldi	r30, 0x37	; 55
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	10 82       	st	Z, r1
				return 1;
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	9b 83       	std	Y+3, r25	; 0x03
     4fc:	31 c0       	rjmp	.+98     	; 0x560 <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
     4fe:	2f ef       	ldi	r18, 0xFF	; 255
     500:	2b 83       	std	Y+3, r18	; 0x03
     502:	2e c0       	rjmp	.+92     	; 0x560 <DIO_SetPortDirection+0x108>
			break;
	case PORTC:
			if(Mode == OUTPUT)
     504:	8a 81       	ldd	r24, Y+2	; 0x02
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	39 f4       	brne	.+14     	; 0x518 <DIO_SetPortDirection+0xc0>
			{
				DIO_DDRC =0xff;
     50a:	e4 e3       	ldi	r30, 0x34	; 52
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	80 83       	st	Z, r24
				return 1;
     512:	31 e0       	ldi	r19, 0x01	; 1
     514:	3b 83       	std	Y+3, r19	; 0x03
     516:	24 c0       	rjmp	.+72     	; 0x560 <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
     518:	8a 81       	ldd	r24, Y+2	; 0x02
     51a:	88 23       	and	r24, r24
     51c:	31 f4       	brne	.+12     	; 0x52a <DIO_SetPortDirection+0xd2>
			{
				DIO_DDRC = 0x00;
     51e:	e4 e3       	ldi	r30, 0x34	; 52
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	10 82       	st	Z, r1
				return 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	8b 83       	std	Y+3, r24	; 0x03
     528:	1b c0       	rjmp	.+54     	; 0x560 <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
     52a:	9f ef       	ldi	r25, 0xFF	; 255
     52c:	9b 83       	std	Y+3, r25	; 0x03
     52e:	18 c0       	rjmp	.+48     	; 0x560 <DIO_SetPortDirection+0x108>
			break;
	case PORTD:
			if(Mode == OUTPUT)
     530:	8a 81       	ldd	r24, Y+2	; 0x02
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	39 f4       	brne	.+14     	; 0x544 <DIO_SetPortDirection+0xec>
			{
				DIO_DDRD =0xff;
     536:	e1 e3       	ldi	r30, 0x31	; 49
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	80 83       	st	Z, r24
				return 1;
     53e:	21 e0       	ldi	r18, 0x01	; 1
     540:	2b 83       	std	Y+3, r18	; 0x03
     542:	0e c0       	rjmp	.+28     	; 0x560 <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	88 23       	and	r24, r24
     548:	31 f4       	brne	.+12     	; 0x556 <DIO_SetPortDirection+0xfe>
			{
				DIO_DDRD = 0x00;
     54a:	e1 e3       	ldi	r30, 0x31	; 49
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	10 82       	st	Z, r1
				return 1;
     550:	31 e0       	ldi	r19, 0x01	; 1
     552:	3b 83       	std	Y+3, r19	; 0x03
     554:	05 c0       	rjmp	.+10     	; 0x560 <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
     556:	8f ef       	ldi	r24, 0xFF	; 255
     558:	8b 83       	std	Y+3, r24	; 0x03
     55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_SetPortDirection+0x108>
			break;
	default:
			return -1;
     55c:	9f ef       	ldi	r25, 0xFF	; 255
     55e:	9b 83       	std	Y+3, r25	; 0x03
     560:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	cf 91       	pop	r28
     56e:	df 91       	pop	r29
     570:	08 95       	ret

00000572 <DIO_SetPinValue>:
 * Set Pin value from any port
 * INPUT : PORT name , PIN number , value
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPinValue(uint8_t PORT , uint8_t PIN , uint8_t value)
{
     572:	df 93       	push	r29
     574:	cf 93       	push	r28
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	28 97       	sbiw	r28, 0x08	; 8
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	89 83       	std	Y+1, r24	; 0x01
     588:	6a 83       	std	Y+2, r22	; 0x02
     58a:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN >7)
     58c:	8a 81       	ldd	r24, Y+2	; 0x02
     58e:	88 30       	cpi	r24, 0x08	; 8
     590:	18 f0       	brcs	.+6      	; 0x598 <DIO_SetPinValue+0x26>
		{
			return -1;
     592:	2f ef       	ldi	r18, 0xFF	; 255
     594:	28 87       	std	Y+8, r18	; 0x08
     596:	04 c1       	rjmp	.+520    	; 0x7a0 <DIO_SetPinValue+0x22e>
		}
		else
		{
			if(value == HIGH)
     598:	8b 81       	ldd	r24, Y+3	; 0x03
     59a:	81 30       	cpi	r24, 0x01	; 1
     59c:	09 f0       	breq	.+2      	; 0x5a0 <DIO_SetPinValue+0x2e>
     59e:	7b c0       	rjmp	.+246    	; 0x696 <DIO_SetPinValue+0x124>
			{
				switch(PORT)
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	28 2f       	mov	r18, r24
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	3f 83       	std	Y+7, r19	; 0x07
     5a8:	2e 83       	std	Y+6, r18	; 0x06
     5aa:	8e 81       	ldd	r24, Y+6	; 0x06
     5ac:	9f 81       	ldd	r25, Y+7	; 0x07
     5ae:	82 30       	cpi	r24, 0x02	; 2
     5b0:	91 05       	cpc	r25, r1
     5b2:	69 f1       	breq	.+90     	; 0x60e <DIO_SetPinValue+0x9c>
     5b4:	2e 81       	ldd	r18, Y+6	; 0x06
     5b6:	3f 81       	ldd	r19, Y+7	; 0x07
     5b8:	23 30       	cpi	r18, 0x03	; 3
     5ba:	31 05       	cpc	r19, r1
     5bc:	34 f4       	brge	.+12     	; 0x5ca <DIO_SetPinValue+0x58>
     5be:	8e 81       	ldd	r24, Y+6	; 0x06
     5c0:	9f 81       	ldd	r25, Y+7	; 0x07
     5c2:	81 30       	cpi	r24, 0x01	; 1
     5c4:	91 05       	cpc	r25, r1
     5c6:	69 f0       	breq	.+26     	; 0x5e2 <DIO_SetPinValue+0x70>
     5c8:	63 c0       	rjmp	.+198    	; 0x690 <DIO_SetPinValue+0x11e>
     5ca:	2e 81       	ldd	r18, Y+6	; 0x06
     5cc:	3f 81       	ldd	r19, Y+7	; 0x07
     5ce:	23 30       	cpi	r18, 0x03	; 3
     5d0:	31 05       	cpc	r19, r1
     5d2:	91 f1       	breq	.+100    	; 0x638 <DIO_SetPinValue+0xc6>
     5d4:	8e 81       	ldd	r24, Y+6	; 0x06
     5d6:	9f 81       	ldd	r25, Y+7	; 0x07
     5d8:	84 30       	cpi	r24, 0x04	; 4
     5da:	91 05       	cpc	r25, r1
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <DIO_SetPinValue+0x6e>
     5de:	42 c0       	rjmp	.+132    	; 0x664 <DIO_SetPinValue+0xf2>
     5e0:	57 c0       	rjmp	.+174    	; 0x690 <DIO_SetPinValue+0x11e>
						{
						case PORTA:
							SET_BIT(DIO_PORTA,PIN);
     5e2:	ab e3       	ldi	r26, 0x3B	; 59
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	eb e3       	ldi	r30, 0x3B	; 59
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	48 2f       	mov	r20, r24
     5ee:	8a 81       	ldd	r24, Y+2	; 0x02
     5f0:	28 2f       	mov	r18, r24
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	02 2e       	mov	r0, r18
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_SetPinValue+0x8e>
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	0a 94       	dec	r0
     602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_SetPinValue+0x8a>
     604:	84 2b       	or	r24, r20
     606:	8c 93       	st	X, r24
							return 1;
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	98 87       	std	Y+8, r25	; 0x08
     60c:	c9 c0       	rjmp	.+402    	; 0x7a0 <DIO_SetPinValue+0x22e>
							break;
						case PORTB:
							SET_BIT(DIO_PORTB,PIN);
     60e:	a8 e3       	ldi	r26, 0x38	; 56
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	e8 e3       	ldi	r30, 0x38	; 56
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	48 2f       	mov	r20, r24
     61a:	8a 81       	ldd	r24, Y+2	; 0x02
     61c:	28 2f       	mov	r18, r24
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_SetPinValue+0xb8>
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	2a 95       	dec	r18
     62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_SetPinValue+0xb4>
     62e:	84 2b       	or	r24, r20
     630:	8c 93       	st	X, r24
							return 1;
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	28 87       	std	Y+8, r18	; 0x08
     636:	b4 c0       	rjmp	.+360    	; 0x7a0 <DIO_SetPinValue+0x22e>
							break;
						case PORTC:
							SET_BIT(DIO_PORTC,PIN);
     638:	a5 e3       	ldi	r26, 0x35	; 53
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e5 e3       	ldi	r30, 0x35	; 53
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	48 2f       	mov	r20, r24
     644:	8a 81       	ldd	r24, Y+2	; 0x02
     646:	28 2f       	mov	r18, r24
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	02 2e       	mov	r0, r18
     650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_SetPinValue+0xe4>
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	0a 94       	dec	r0
     658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_SetPinValue+0xe0>
     65a:	84 2b       	or	r24, r20
     65c:	8c 93       	st	X, r24
							return 1;
     65e:	31 e0       	ldi	r19, 0x01	; 1
     660:	38 87       	std	Y+8, r19	; 0x08
     662:	9e c0       	rjmp	.+316    	; 0x7a0 <DIO_SetPinValue+0x22e>
							break;
						case PORTD:
							SET_BIT(DIO_PORTD,PIN);
     664:	a2 e3       	ldi	r26, 0x32	; 50
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	e2 e3       	ldi	r30, 0x32	; 50
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	48 2f       	mov	r20, r24
     670:	8a 81       	ldd	r24, Y+2	; 0x02
     672:	28 2f       	mov	r18, r24
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	02 2e       	mov	r0, r18
     67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_SetPinValue+0x110>
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	0a 94       	dec	r0
     684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_SetPinValue+0x10c>
     686:	84 2b       	or	r24, r20
     688:	8c 93       	st	X, r24
							return 1;
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	88 87       	std	Y+8, r24	; 0x08
     68e:	88 c0       	rjmp	.+272    	; 0x7a0 <DIO_SetPinValue+0x22e>
							break;
						default:
							return -2;
     690:	9e ef       	ldi	r25, 0xFE	; 254
     692:	98 87       	std	Y+8, r25	; 0x08
     694:	85 c0       	rjmp	.+266    	; 0x7a0 <DIO_SetPinValue+0x22e>
						}
			}
			else if( value == LOW)
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	88 23       	and	r24, r24
     69a:	09 f0       	breq	.+2      	; 0x69e <DIO_SetPinValue+0x12c>
     69c:	7f c0       	rjmp	.+254    	; 0x79c <DIO_SetPinValue+0x22a>
				{
				switch(PORT)
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	28 2f       	mov	r18, r24
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	3d 83       	std	Y+5, r19	; 0x05
     6a6:	2c 83       	std	Y+4, r18	; 0x04
     6a8:	8c 81       	ldd	r24, Y+4	; 0x04
     6aa:	9d 81       	ldd	r25, Y+5	; 0x05
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	91 05       	cpc	r25, r1
     6b0:	71 f1       	breq	.+92     	; 0x70e <DIO_SetPinValue+0x19c>
     6b2:	2c 81       	ldd	r18, Y+4	; 0x04
     6b4:	3d 81       	ldd	r19, Y+5	; 0x05
     6b6:	23 30       	cpi	r18, 0x03	; 3
     6b8:	31 05       	cpc	r19, r1
     6ba:	34 f4       	brge	.+12     	; 0x6c8 <DIO_SetPinValue+0x156>
     6bc:	8c 81       	ldd	r24, Y+4	; 0x04
     6be:	9d 81       	ldd	r25, Y+5	; 0x05
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	91 05       	cpc	r25, r1
     6c4:	69 f0       	breq	.+26     	; 0x6e0 <DIO_SetPinValue+0x16e>
     6c6:	67 c0       	rjmp	.+206    	; 0x796 <DIO_SetPinValue+0x224>
     6c8:	2c 81       	ldd	r18, Y+4	; 0x04
     6ca:	3d 81       	ldd	r19, Y+5	; 0x05
     6cc:	23 30       	cpi	r18, 0x03	; 3
     6ce:	31 05       	cpc	r19, r1
     6d0:	a1 f1       	breq	.+104    	; 0x73a <DIO_SetPinValue+0x1c8>
     6d2:	8c 81       	ldd	r24, Y+4	; 0x04
     6d4:	9d 81       	ldd	r25, Y+5	; 0x05
     6d6:	84 30       	cpi	r24, 0x04	; 4
     6d8:	91 05       	cpc	r25, r1
     6da:	09 f4       	brne	.+2      	; 0x6de <DIO_SetPinValue+0x16c>
     6dc:	45 c0       	rjmp	.+138    	; 0x768 <DIO_SetPinValue+0x1f6>
     6de:	5b c0       	rjmp	.+182    	; 0x796 <DIO_SetPinValue+0x224>
					{
				case PORTA:
					CLR_BIT(DIO_PORTA,PIN);
     6e0:	ab e3       	ldi	r26, 0x3B	; 59
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	eb e3       	ldi	r30, 0x3B	; 59
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	48 2f       	mov	r20, r24
     6ec:	8a 81       	ldd	r24, Y+2	; 0x02
     6ee:	28 2f       	mov	r18, r24
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	02 2e       	mov	r0, r18
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_SetPinValue+0x18c>
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	0a 94       	dec	r0
     700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_SetPinValue+0x188>
     702:	80 95       	com	r24
     704:	84 23       	and	r24, r20
     706:	8c 93       	st	X, r24
						return 1;
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	98 87       	std	Y+8, r25	; 0x08
     70c:	49 c0       	rjmp	.+146    	; 0x7a0 <DIO_SetPinValue+0x22e>
						break;
				case PORTB:
					CLR_BIT(DIO_PORTB,PIN);
     70e:	a8 e3       	ldi	r26, 0x38	; 56
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	e8 e3       	ldi	r30, 0x38	; 56
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	48 2f       	mov	r20, r24
     71a:	8a 81       	ldd	r24, Y+2	; 0x02
     71c:	28 2f       	mov	r18, r24
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_SetPinValue+0x1b8>
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	2a 95       	dec	r18
     72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_SetPinValue+0x1b4>
     72e:	80 95       	com	r24
     730:	84 23       	and	r24, r20
     732:	8c 93       	st	X, r24
						return 1;
     734:	21 e0       	ldi	r18, 0x01	; 1
     736:	28 87       	std	Y+8, r18	; 0x08
     738:	33 c0       	rjmp	.+102    	; 0x7a0 <DIO_SetPinValue+0x22e>
						break;
				case PORTC:
					CLR_BIT(DIO_PORTC,PIN);
     73a:	a5 e3       	ldi	r26, 0x35	; 53
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	e5 e3       	ldi	r30, 0x35	; 53
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	80 81       	ld	r24, Z
     744:	48 2f       	mov	r20, r24
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	28 2f       	mov	r18, r24
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	02 2e       	mov	r0, r18
     752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_SetPinValue+0x1e6>
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	0a 94       	dec	r0
     75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_SetPinValue+0x1e2>
     75c:	80 95       	com	r24
     75e:	84 23       	and	r24, r20
     760:	8c 93       	st	X, r24
						return 1;
     762:	31 e0       	ldi	r19, 0x01	; 1
     764:	38 87       	std	Y+8, r19	; 0x08
     766:	1c c0       	rjmp	.+56     	; 0x7a0 <DIO_SetPinValue+0x22e>
						break;
				case PORTD:
					CLR_BIT(DIO_PORTD,PIN);
     768:	a2 e3       	ldi	r26, 0x32	; 50
     76a:	b0 e0       	ldi	r27, 0x00	; 0
     76c:	e2 e3       	ldi	r30, 0x32	; 50
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	48 2f       	mov	r20, r24
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	28 2f       	mov	r18, r24
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	02 2e       	mov	r0, r18
     780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_SetPinValue+0x214>
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	0a 94       	dec	r0
     788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_SetPinValue+0x210>
     78a:	80 95       	com	r24
     78c:	84 23       	and	r24, r20
     78e:	8c 93       	st	X, r24
						return 1;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	88 87       	std	Y+8, r24	; 0x08
     794:	05 c0       	rjmp	.+10     	; 0x7a0 <DIO_SetPinValue+0x22e>
						break;
				default:
						return -2;
     796:	9e ef       	ldi	r25, 0xFE	; 254
     798:	98 87       	std	Y+8, r25	; 0x08
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_SetPinValue+0x22e>
					}
				}
			else
			{
				return -3;
     79c:	2d ef       	ldi	r18, 0xFD	; 253
     79e:	28 87       	std	Y+8, r18	; 0x08
     7a0:	88 85       	ldd	r24, Y+8	; 0x08
			}
		}
}
     7a2:	28 96       	adiw	r28, 0x08	; 8
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	cf 91       	pop	r28
     7b0:	df 91       	pop	r29
     7b2:	08 95       	ret

000007b4 <DIO_SetPortValue>:
 * Set port value
 * INPUT : PORT name  , value
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPortValue(uint8_t PORT , uint8_t value)
{
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <DIO_SetPortValue+0x6>
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <DIO_SetPortValue+0x8>
     7bc:	0f 92       	push	r0
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT)
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	28 2f       	mov	r18, r24
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	3d 83       	std	Y+5, r19	; 0x05
     7ce:	2c 83       	std	Y+4, r18	; 0x04
     7d0:	8c 81       	ldd	r24, Y+4	; 0x04
     7d2:	9d 81       	ldd	r25, Y+5	; 0x05
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	91 05       	cpc	r25, r1
     7d8:	e9 f0       	breq	.+58     	; 0x814 <DIO_SetPortValue+0x60>
     7da:	2c 81       	ldd	r18, Y+4	; 0x04
     7dc:	3d 81       	ldd	r19, Y+5	; 0x05
     7de:	23 30       	cpi	r18, 0x03	; 3
     7e0:	31 05       	cpc	r19, r1
     7e2:	34 f4       	brge	.+12     	; 0x7f0 <DIO_SetPortValue+0x3c>
     7e4:	8c 81       	ldd	r24, Y+4	; 0x04
     7e6:	9d 81       	ldd	r25, Y+5	; 0x05
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	91 05       	cpc	r25, r1
     7ec:	61 f0       	breq	.+24     	; 0x806 <DIO_SetPortValue+0x52>
     7ee:	27 c0       	rjmp	.+78     	; 0x83e <DIO_SetPortValue+0x8a>
     7f0:	2c 81       	ldd	r18, Y+4	; 0x04
     7f2:	3d 81       	ldd	r19, Y+5	; 0x05
     7f4:	23 30       	cpi	r18, 0x03	; 3
     7f6:	31 05       	cpc	r19, r1
     7f8:	a1 f0       	breq	.+40     	; 0x822 <DIO_SetPortValue+0x6e>
     7fa:	8c 81       	ldd	r24, Y+4	; 0x04
     7fc:	9d 81       	ldd	r25, Y+5	; 0x05
     7fe:	84 30       	cpi	r24, 0x04	; 4
     800:	91 05       	cpc	r25, r1
     802:	b1 f0       	breq	.+44     	; 0x830 <DIO_SetPortValue+0x7c>
     804:	1c c0       	rjmp	.+56     	; 0x83e <DIO_SetPortValue+0x8a>
		{
		case PORTA:
			DIO_PORTA = value;
     806:	eb e3       	ldi	r30, 0x3B	; 59
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	8a 81       	ldd	r24, Y+2	; 0x02
     80c:	80 83       	st	Z, r24
				return 1;
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	9b 83       	std	Y+3, r25	; 0x03
     812:	17 c0       	rjmp	.+46     	; 0x842 <DIO_SetPortValue+0x8e>
				break;
		case PORTB:
				DIO_PORTB = value;
     814:	e8 e3       	ldi	r30, 0x38	; 56
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	8a 81       	ldd	r24, Y+2	; 0x02
     81a:	80 83       	st	Z, r24
				return 1;
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	2b 83       	std	Y+3, r18	; 0x03
     820:	10 c0       	rjmp	.+32     	; 0x842 <DIO_SetPortValue+0x8e>
				break;
		case PORTC:
				DIO_PORTC = value;
     822:	e5 e3       	ldi	r30, 0x35	; 53
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	80 83       	st	Z, r24
				return 1;
     82a:	31 e0       	ldi	r19, 0x01	; 1
     82c:	3b 83       	std	Y+3, r19	; 0x03
     82e:	09 c0       	rjmp	.+18     	; 0x842 <DIO_SetPortValue+0x8e>
				break;
		case PORTD:
				DIO_PORTD = value;
     830:	e2 e3       	ldi	r30, 0x32	; 50
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	80 83       	st	Z, r24
				return 1;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	8b 83       	std	Y+3, r24	; 0x03
     83c:	02 c0       	rjmp	.+4      	; 0x842 <DIO_SetPortValue+0x8e>
				break;
		default:
				return -1;
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	9b 83       	std	Y+3, r25	; 0x03
     842:	8b 81       	ldd	r24, Y+3	; 0x03
		}
}
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	cf 91       	pop	r28
     850:	df 91       	pop	r29
     852:	08 95       	ret

00000854 <DIO_GetPinVal>:
 * get Pin value from any port
 * INPUT : PORT name , PIN number , variable to store the data
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_GetPinVal(uint8_t PORT , uint8_t PIN , uint8_t * val)
{
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	27 97       	sbiw	r28, 0x07	; 7
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	89 83       	std	Y+1, r24	; 0x01
     86a:	6a 83       	std	Y+2, r22	; 0x02
     86c:	5c 83       	std	Y+4, r21	; 0x04
     86e:	4b 83       	std	Y+3, r20	; 0x03

	if(PIN >7)
     870:	8a 81       	ldd	r24, Y+2	; 0x02
     872:	88 30       	cpi	r24, 0x08	; 8
     874:	18 f0       	brcs	.+6      	; 0x87c <__stack+0x1d>
			{
				return -1;
     876:	2f ef       	ldi	r18, 0xFF	; 255
     878:	2f 83       	std	Y+7, r18	; 0x07
     87a:	7b c0       	rjmp	.+246    	; 0x972 <__stack+0x113>
			}
			else
			{
					switch(PORT)
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	48 2f       	mov	r20, r24
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	5e 83       	std	Y+6, r21	; 0x06
     884:	4d 83       	std	Y+5, r20	; 0x05
     886:	8d 81       	ldd	r24, Y+5	; 0x05
     888:	9e 81       	ldd	r25, Y+6	; 0x06
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	91 05       	cpc	r25, r1
     88e:	69 f1       	breq	.+90     	; 0x8ea <__stack+0x8b>
     890:	2d 81       	ldd	r18, Y+5	; 0x05
     892:	3e 81       	ldd	r19, Y+6	; 0x06
     894:	23 30       	cpi	r18, 0x03	; 3
     896:	31 05       	cpc	r19, r1
     898:	34 f4       	brge	.+12     	; 0x8a6 <__stack+0x47>
     89a:	4d 81       	ldd	r20, Y+5	; 0x05
     89c:	5e 81       	ldd	r21, Y+6	; 0x06
     89e:	41 30       	cpi	r20, 0x01	; 1
     8a0:	51 05       	cpc	r21, r1
     8a2:	69 f0       	breq	.+26     	; 0x8be <__stack+0x5f>
     8a4:	64 c0       	rjmp	.+200    	; 0x96e <__stack+0x10f>
     8a6:	8d 81       	ldd	r24, Y+5	; 0x05
     8a8:	9e 81       	ldd	r25, Y+6	; 0x06
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	91 05       	cpc	r25, r1
     8ae:	99 f1       	breq	.+102    	; 0x916 <__stack+0xb7>
     8b0:	2d 81       	ldd	r18, Y+5	; 0x05
     8b2:	3e 81       	ldd	r19, Y+6	; 0x06
     8b4:	24 30       	cpi	r18, 0x04	; 4
     8b6:	31 05       	cpc	r19, r1
     8b8:	09 f4       	brne	.+2      	; 0x8bc <__stack+0x5d>
     8ba:	43 c0       	rjmp	.+134    	; 0x942 <__stack+0xe3>
     8bc:	58 c0       	rjmp	.+176    	; 0x96e <__stack+0x10f>
							{
							case PORTA:
								*val =  GET_BIT(DIO_PINA,PIN);
     8be:	e9 e3       	ldi	r30, 0x39	; 57
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	28 2f       	mov	r18, r24
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ca:	88 2f       	mov	r24, r24
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	a9 01       	movw	r20, r18
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
     8d2:	55 95       	asr	r21
     8d4:	47 95       	ror	r20
     8d6:	8a 95       	dec	r24
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <__stack+0x73>
     8da:	ca 01       	movw	r24, r20
     8dc:	81 70       	andi	r24, 0x01	; 1
     8de:	eb 81       	ldd	r30, Y+3	; 0x03
     8e0:	fc 81       	ldd	r31, Y+4	; 0x04
     8e2:	80 83       	st	Z, r24
								return 1;
     8e4:	51 e0       	ldi	r21, 0x01	; 1
     8e6:	5f 83       	std	Y+7, r21	; 0x07
     8e8:	44 c0       	rjmp	.+136    	; 0x972 <__stack+0x113>
								break;
							case PORTB:
								*val =  GET_BIT(DIO_PINB,PIN);
     8ea:	e6 e3       	ldi	r30, 0x36	; 54
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	28 2f       	mov	r18, r24
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	8a 81       	ldd	r24, Y+2	; 0x02
     8f6:	88 2f       	mov	r24, r24
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	a9 01       	movw	r20, r18
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0xa3>
     8fe:	55 95       	asr	r21
     900:	47 95       	ror	r20
     902:	8a 95       	dec	r24
     904:	e2 f7       	brpl	.-8      	; 0x8fe <__stack+0x9f>
     906:	ca 01       	movw	r24, r20
     908:	81 70       	andi	r24, 0x01	; 1
     90a:	eb 81       	ldd	r30, Y+3	; 0x03
     90c:	fc 81       	ldd	r31, Y+4	; 0x04
     90e:	80 83       	st	Z, r24
								return 1;
     910:	51 e0       	ldi	r21, 0x01	; 1
     912:	5f 83       	std	Y+7, r21	; 0x07
     914:	2e c0       	rjmp	.+92     	; 0x972 <__stack+0x113>
								break;
							case PORTC:
								*val =  GET_BIT(DIO_PINC,PIN);
     916:	e3 e3       	ldi	r30, 0x33	; 51
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	28 2f       	mov	r18, r24
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	8a 81       	ldd	r24, Y+2	; 0x02
     922:	88 2f       	mov	r24, r24
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a9 01       	movw	r20, r18
     928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0xcf>
     92a:	55 95       	asr	r21
     92c:	47 95       	ror	r20
     92e:	8a 95       	dec	r24
     930:	e2 f7       	brpl	.-8      	; 0x92a <__stack+0xcb>
     932:	ca 01       	movw	r24, r20
     934:	81 70       	andi	r24, 0x01	; 1
     936:	eb 81       	ldd	r30, Y+3	; 0x03
     938:	fc 81       	ldd	r31, Y+4	; 0x04
     93a:	80 83       	st	Z, r24
								return 1;
     93c:	51 e0       	ldi	r21, 0x01	; 1
     93e:	5f 83       	std	Y+7, r21	; 0x07
     940:	18 c0       	rjmp	.+48     	; 0x972 <__stack+0x113>
								break;
							case PORTD:
								*val =  GET_BIT(DIO_PIND,PIN);
     942:	e0 e3       	ldi	r30, 0x30	; 48
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	28 2f       	mov	r18, r24
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	8a 81       	ldd	r24, Y+2	; 0x02
     94e:	88 2f       	mov	r24, r24
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	a9 01       	movw	r20, r18
     954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0xfb>
     956:	55 95       	asr	r21
     958:	47 95       	ror	r20
     95a:	8a 95       	dec	r24
     95c:	e2 f7       	brpl	.-8      	; 0x956 <__stack+0xf7>
     95e:	ca 01       	movw	r24, r20
     960:	81 70       	andi	r24, 0x01	; 1
     962:	eb 81       	ldd	r30, Y+3	; 0x03
     964:	fc 81       	ldd	r31, Y+4	; 0x04
     966:	80 83       	st	Z, r24
								return 1;
     968:	51 e0       	ldi	r21, 0x01	; 1
     96a:	5f 83       	std	Y+7, r21	; 0x07
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__stack+0x113>
								break;
							default:
								return -2;
     96e:	8e ef       	ldi	r24, 0xFE	; 254
     970:	8f 83       	std	Y+7, r24	; 0x07
     972:	8f 81       	ldd	r24, Y+7	; 0x07
							}
			}
}
     974:	27 96       	adiw	r28, 0x07	; 7
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	cd bf       	out	0x3d, r28	; 61
     980:	cf 91       	pop	r28
     982:	df 91       	pop	r29
     984:	08 95       	ret

00000986 <DIO_TogglePin>:
 * Toggle Pin value of any port
 * INPUT : PORT name , PIN number
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_TogglePin(uint8_t PORT , uint8_t PIN )
{
     986:	df 93       	push	r29
     988:	cf 93       	push	r28
     98a:	00 d0       	rcall	.+0      	; 0x98c <DIO_TogglePin+0x6>
     98c:	00 d0       	rcall	.+0      	; 0x98e <DIO_TogglePin+0x8>
     98e:	0f 92       	push	r0
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	6a 83       	std	Y+2, r22	; 0x02
	if(PIN >7)
     998:	8a 81       	ldd	r24, Y+2	; 0x02
     99a:	88 30       	cpi	r24, 0x08	; 8
     99c:	18 f0       	brcs	.+6      	; 0x9a4 <DIO_TogglePin+0x1e>
		{
			return -1;
     99e:	2f ef       	ldi	r18, 0xFF	; 255
     9a0:	2d 83       	std	Y+5, r18	; 0x05
     9a2:	7a c0       	rjmp	.+244    	; 0xa98 <DIO_TogglePin+0x112>
		}
		else
		{
				switch(PORT)
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	28 2f       	mov	r18, r24
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	3c 83       	std	Y+4, r19	; 0x04
     9ac:	2b 83       	std	Y+3, r18	; 0x03
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	9c 81       	ldd	r25, Y+4	; 0x04
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	91 05       	cpc	r25, r1
     9b6:	69 f1       	breq	.+90     	; 0xa12 <DIO_TogglePin+0x8c>
     9b8:	2b 81       	ldd	r18, Y+3	; 0x03
     9ba:	3c 81       	ldd	r19, Y+4	; 0x04
     9bc:	23 30       	cpi	r18, 0x03	; 3
     9be:	31 05       	cpc	r19, r1
     9c0:	34 f4       	brge	.+12     	; 0x9ce <DIO_TogglePin+0x48>
     9c2:	8b 81       	ldd	r24, Y+3	; 0x03
     9c4:	9c 81       	ldd	r25, Y+4	; 0x04
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	91 05       	cpc	r25, r1
     9ca:	69 f0       	breq	.+26     	; 0x9e6 <DIO_TogglePin+0x60>
     9cc:	63 c0       	rjmp	.+198    	; 0xa94 <DIO_TogglePin+0x10e>
     9ce:	2b 81       	ldd	r18, Y+3	; 0x03
     9d0:	3c 81       	ldd	r19, Y+4	; 0x04
     9d2:	23 30       	cpi	r18, 0x03	; 3
     9d4:	31 05       	cpc	r19, r1
     9d6:	91 f1       	breq	.+100    	; 0xa3c <DIO_TogglePin+0xb6>
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	9c 81       	ldd	r25, Y+4	; 0x04
     9dc:	84 30       	cpi	r24, 0x04	; 4
     9de:	91 05       	cpc	r25, r1
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <DIO_TogglePin+0x5e>
     9e2:	42 c0       	rjmp	.+132    	; 0xa68 <DIO_TogglePin+0xe2>
     9e4:	57 c0       	rjmp	.+174    	; 0xa94 <DIO_TogglePin+0x10e>
						{
						case PORTA:
							TOGGLE_BIT(DIO_PORTA,PIN);
     9e6:	ab e3       	ldi	r26, 0x3B	; 59
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	eb e3       	ldi	r30, 0x3B	; 59
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	48 2f       	mov	r20, r24
     9f2:	8a 81       	ldd	r24, Y+2	; 0x02
     9f4:	28 2f       	mov	r18, r24
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	02 2e       	mov	r0, r18
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <DIO_TogglePin+0x7e>
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	0a 94       	dec	r0
     a06:	e2 f7       	brpl	.-8      	; 0xa00 <DIO_TogglePin+0x7a>
     a08:	84 27       	eor	r24, r20
     a0a:	8c 93       	st	X, r24
							return 1;
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	9d 83       	std	Y+5, r25	; 0x05
     a10:	43 c0       	rjmp	.+134    	; 0xa98 <DIO_TogglePin+0x112>
							break;
						case PORTB:
							TOGGLE_BIT(DIO_PORTB,PIN);
     a12:	a8 e3       	ldi	r26, 0x38	; 56
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	e8 e3       	ldi	r30, 0x38	; 56
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 81       	ld	r24, Z
     a1c:	48 2f       	mov	r20, r24
     a1e:	8a 81       	ldd	r24, Y+2	; 0x02
     a20:	28 2f       	mov	r18, r24
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <DIO_TogglePin+0xa8>
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	2a 95       	dec	r18
     a30:	e2 f7       	brpl	.-8      	; 0xa2a <DIO_TogglePin+0xa4>
     a32:	84 27       	eor	r24, r20
     a34:	8c 93       	st	X, r24
							return 1;
     a36:	21 e0       	ldi	r18, 0x01	; 1
     a38:	2d 83       	std	Y+5, r18	; 0x05
     a3a:	2e c0       	rjmp	.+92     	; 0xa98 <DIO_TogglePin+0x112>
							break;
						case PORTC:
							TOGGLE_BIT(DIO_PORTC,PIN);
     a3c:	a5 e3       	ldi	r26, 0x35	; 53
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e5 e3       	ldi	r30, 0x35	; 53
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	48 2f       	mov	r20, r24
     a48:	8a 81       	ldd	r24, Y+2	; 0x02
     a4a:	28 2f       	mov	r18, r24
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	02 2e       	mov	r0, r18
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <DIO_TogglePin+0xd4>
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	0a 94       	dec	r0
     a5c:	e2 f7       	brpl	.-8      	; 0xa56 <DIO_TogglePin+0xd0>
     a5e:	84 27       	eor	r24, r20
     a60:	8c 93       	st	X, r24
							return 1;
     a62:	31 e0       	ldi	r19, 0x01	; 1
     a64:	3d 83       	std	Y+5, r19	; 0x05
     a66:	18 c0       	rjmp	.+48     	; 0xa98 <DIO_TogglePin+0x112>
							break;
						case PORTD:
							TOGGLE_BIT(DIO_PORTD,PIN);
     a68:	a2 e3       	ldi	r26, 0x32	; 50
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	e2 e3       	ldi	r30, 0x32	; 50
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	48 2f       	mov	r20, r24
     a74:	8a 81       	ldd	r24, Y+2	; 0x02
     a76:	28 2f       	mov	r18, r24
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	02 2e       	mov	r0, r18
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_TogglePin+0x100>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	0a 94       	dec	r0
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_TogglePin+0xfc>
     a8a:	84 27       	eor	r24, r20
     a8c:	8c 93       	st	X, r24
							return 1;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	8d 83       	std	Y+5, r24	; 0x05
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <DIO_TogglePin+0x112>
							break;
						default:
							return -2;
     a94:	9e ef       	ldi	r25, 0xFE	; 254
     a96:	9d 83       	std	Y+5, r25	; 0x05
     a98:	8d 81       	ldd	r24, Y+5	; 0x05
						}

		}
}
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	cf 91       	pop	r28
     aa6:	df 91       	pop	r29
     aa8:	08 95       	ret

00000aaa <GlobalInerruptEnable>:
#include "Interrupt_interface.h"
#include "Interrupt_private.h"
#include "Interrupt_config.h"

void GlobalInerruptEnable(void)
{
     aaa:	df 93       	push	r29
     aac:	cf 93       	push	r28
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     ab2:	af e5       	ldi	r26, 0x5F	; 95
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	ef e5       	ldi	r30, 0x5F	; 95
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	80 68       	ori	r24, 0x80	; 128
     abe:	8c 93       	st	X, r24
}
     ac0:	cf 91       	pop	r28
     ac2:	df 91       	pop	r29
     ac4:	08 95       	ret

00000ac6 <LED_Init>:

/*
 * Initializing LED as OUTPUT
 */
sint8_t LED_Init(uint8_t PORT , uint8_t Pin)
{
     ac6:	df 93       	push	r29
     ac8:	cf 93       	push	r28
     aca:	00 d0       	rcall	.+0      	; 0xacc <LED_Init+0x6>
     acc:	0f 92       	push	r0
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
     ad2:	89 83       	std	Y+1, r24	; 0x01
     ad4:	6a 83       	std	Y+2, r22	; 0x02
	if(Pin>7)
     ad6:	8a 81       	ldd	r24, Y+2	; 0x02
     ad8:	88 30       	cpi	r24, 0x08	; 8
     ada:	18 f0       	brcs	.+6      	; 0xae2 <LED_Init+0x1c>
	{
		return -1;
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	8b 83       	std	Y+3, r24	; 0x03
     ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <LED_Init+0x2a>
	}
	else
	{
		DIO_SetPinDircection(PORT,Pin,OUTPUT);
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	6a 81       	ldd	r22, Y+2	; 0x02
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDircection>
	return 1;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	8b 83       	std	Y+3, r24	; 0x03
     af0:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	cf 91       	pop	r28
     afa:	df 91       	pop	r29
     afc:	08 95       	ret

00000afe <LED_ON>:
 * Turn LED ON
 * INPUT : PORT , PIN
 * OUTPUT: 1 if ok -1 if not ok
 */
sint8_t LED_ON(uint8_t PORT , uint8_t Pin)
{
     afe:	df 93       	push	r29
     b00:	cf 93       	push	r28
     b02:	00 d0       	rcall	.+0      	; 0xb04 <LED_ON+0x6>
     b04:	0f 92       	push	r0
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	89 83       	std	Y+1, r24	; 0x01
     b0c:	6a 83       	std	Y+2, r22	; 0x02
	if(Pin>7)
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
     b10:	88 30       	cpi	r24, 0x08	; 8
     b12:	18 f0       	brcs	.+6      	; 0xb1a <LED_ON+0x1c>
	{
		return -1;
     b14:	8f ef       	ldi	r24, 0xFF	; 255
     b16:	8b 83       	std	Y+3, r24	; 0x03
     b18:	07 c0       	rjmp	.+14     	; 0xb28 <LED_ON+0x2a>
	}
	else
	{
		DIO_SetPinValue(PORT,Pin,HIGH);
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	6a 81       	ldd	r22, Y+2	; 0x02
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	0e 94 b9 02 	call	0x572	; 0x572 <DIO_SetPinValue>
	return 1;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	cf 91       	pop	r28
     b32:	df 91       	pop	r29
     b34:	08 95       	ret

00000b36 <LED_OFF>:
 * Turn LED OFF
 * INPUT : PORT , PIN
 * OUTPUT: 1 if ok -1 if not ok
 */
sint8_t LED_OFF(uint8_t PORT , uint8_t Pin)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <LED_OFF+0x6>
     b3c:	0f 92       	push	r0
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	6a 83       	std	Y+2, r22	; 0x02
	if(Pin>7)
     b46:	8a 81       	ldd	r24, Y+2	; 0x02
     b48:	88 30       	cpi	r24, 0x08	; 8
     b4a:	18 f0       	brcs	.+6      	; 0xb52 <LED_OFF+0x1c>
		{
			return -1;
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	8b 83       	std	Y+3, r24	; 0x03
     b50:	07 c0       	rjmp	.+14     	; 0xb60 <LED_OFF+0x2a>
		}
		else
		{
			DIO_SetPinValue(PORT,Pin,LOW);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	6a 81       	ldd	r22, Y+2	; 0x02
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	0e 94 b9 02 	call	0x572	; 0x572 <DIO_SetPinValue>
			return 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	8b 83       	std	Y+3, r24	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
		}

}
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <LED_TOGGLE>:
 * TOGGLE LED
 * INPUT : PORT , PIN
 * OUTPUT: 1 if ok -1 if not ok
 */
sint8_t LED_TOGGLE(uint8_t PORT , uint8_t Pin)
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	00 d0       	rcall	.+0      	; 0xb74 <LED_TOGGLE+0x6>
     b74:	0f 92       	push	r0
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	6a 83       	std	Y+2, r22	; 0x02
	if(Pin>7)
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	88 30       	cpi	r24, 0x08	; 8
     b82:	18 f0       	brcs	.+6      	; 0xb8a <LED_TOGGLE+0x1c>
			{
				return -1;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	06 c0       	rjmp	.+12     	; 0xb96 <LED_TOGGLE+0x28>
			}
			else
			{
			DIO_TogglePin(PORT,Pin);
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	6a 81       	ldd	r22, Y+2	; 0x02
     b8e:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_TogglePin>
			return 1;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	8b 83       	std	Y+3, r24	; 0x03
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
			}
}
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <Timer0_Init>:
#include "TIMER_interface.h"
#include "TIMER_private.h"
#include "TIMER_config.h"

void Timer0_Init()
{
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
#if Timer0_Mode == NORMAL
	CLR_BIT(TCCR0,3);
     bac:	a3 e5       	ldi	r26, 0x53	; 83
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e3 e5       	ldi	r30, 0x53	; 83
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	87 7f       	andi	r24, 0xF7	; 247
     bb8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
     bba:	a3 e5       	ldi	r26, 0x53	; 83
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e3 e5       	ldi	r30, 0x53	; 83
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	8f 7b       	andi	r24, 0xBF	; 191
     bc6:	8c 93       	st	X, r24
#elif Timer0_prescaler == CLK_256
		CLR_BIT(TCCR0,0);
		CLR_BIT(TCCR0,1);
		SET_BIT(TCCR0,2);
#elif Timer0_prescaler == CLK_1024
		SET_BIT(TCCR0,0);
     bc8:	a3 e5       	ldi	r26, 0x53	; 83
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e3 e5       	ldi	r30, 0x53	; 83
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	81 60       	ori	r24, 0x01	; 1
     bd4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
     bd6:	a3 e5       	ldi	r26, 0x53	; 83
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e3 e5       	ldi	r30, 0x53	; 83
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	8d 7f       	andi	r24, 0xFD	; 253
     be2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
     be4:	a3 e5       	ldi	r26, 0x53	; 83
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e3 e5       	ldi	r30, 0x53	; 83
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	84 60       	ori	r24, 0x04	; 4
     bf0:	8c 93       	st	X, r24
#if TIMER0_INTERRUPT ==	NO_INTERRUPT
		CLR_BIT(TIMSK,0);
		CLR_BIT(TIMSK,1);

#elif TIMER0_INTERRUPT == NORMAL
		SET_BIT(TIMSK,0);
     bf2:	a9 e5       	ldi	r26, 0x59	; 89
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e9 e5       	ldi	r30, 0x59	; 89
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	81 60       	ori	r24, 0x01	; 1
     bfe:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,1);
     c00:	a9 e5       	ldi	r26, 0x59	; 89
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e9 e5       	ldi	r30, 0x59	; 89
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8d 7f       	andi	r24, 0xFD	; 253
     c0c:	8c 93       	st	X, r24
			#error("You chose Wrong clock type")
#endif



}
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <Timer0_GetValue>:

uint8_t Timer0_GetValue(uint8_t *getvalue)
{
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	00 d0       	rcall	.+0      	; 0xc1a <Timer0_GetValue+0x6>
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
	*getvalue = TCNT0;
     c22:	e2 e5       	ldi	r30, 0x52	; 82
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	e9 81       	ldd	r30, Y+1	; 0x01
     c2a:	fa 81       	ldd	r31, Y+2	; 0x02
     c2c:	80 83       	st	Z, r24
	return TCNT0;
     c2e:	e2 e5       	ldi	r30, 0x52	; 82
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <Timer0_Stop>:

void Timer0_Stop()
{
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
			CLR_BIT(TCCR0,0);
     c46:	a3 e5       	ldi	r26, 0x53	; 83
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e3 e5       	ldi	r30, 0x53	; 83
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8e 7f       	andi	r24, 0xFE	; 254
     c52:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,1);
     c54:	a3 e5       	ldi	r26, 0x53	; 83
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e3 e5       	ldi	r30, 0x53	; 83
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	8d 7f       	andi	r24, 0xFD	; 253
     c60:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,2);
     c62:	a3 e5       	ldi	r26, 0x53	; 83
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e3 e5       	ldi	r30, 0x53	; 83
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	8b 7f       	andi	r24, 0xFB	; 251
     c6e:	8c 93       	st	X, r24
}
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	08 95       	ret

00000c76 <Timer0_SetCTC>:

void Timer0_SetCTC(uint8_t CompareValue)
{
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	0f 92       	push	r0
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = CompareValue;
     c82:	ec e5       	ldi	r30, 0x5C	; 92
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	80 83       	st	Z, r24
}
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <Timer0_SetovfFlag>:

void Timer0_SetovfFlag(void)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,0);
     c9a:	a8 e5       	ldi	r26, 0x58	; 88
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e8 e5       	ldi	r30, 0x58	; 88
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	8c 93       	st	X, r24
}
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <Timer0_CheckovfFlag>:

void Timer0_CheckovfFlag(uint8_t *OverflowFlag)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <Timer0_CheckovfFlag+0x6>
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	9a 83       	std	Y+2, r25	; 0x02
     cba:	89 83       	std	Y+1, r24	; 0x01
	*OverflowFlag = GET_BIT(TIFR,0);
     cbc:	e8 e5       	ldi	r30, 0x58	; 88
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	81 70       	andi	r24, 0x01	; 1
     cc4:	e9 81       	ldd	r30, Y+1	; 0x01
     cc6:	fa 81       	ldd	r31, Y+2	; 0x02
     cc8:	80 83       	st	Z, r24
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <Timer0_SetCTCFlag>:

void Timer0_SetCTCFlag(void)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,1);
     cdc:	a8 e5       	ldi	r26, 0x58	; 88
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e8 e5       	ldi	r30, 0x58	; 88
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	82 60       	ori	r24, 0x02	; 2
     ce8:	8c 93       	st	X, r24
}
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <Timer0_CheckCTCFlag>:


void Timer0_CheckCTCFlag(uint8_t *OverflowFlag)
{
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <Timer0_CheckCTCFlag+0x6>
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	9a 83       	std	Y+2, r25	; 0x02
     cfc:	89 83       	std	Y+1, r24	; 0x01
	*OverflowFlag = GET_BIT(TIFR,1);
     cfe:	e8 e5       	ldi	r30, 0x58	; 88
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	86 95       	lsr	r24
     d06:	81 70       	andi	r24, 0x01	; 1
     d08:	e9 81       	ldd	r30, Y+1	; 0x01
     d0a:	fa 81       	ldd	r31, Y+2	; 0x02
     d0c:	80 83       	st	Z, r24
}
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <Timer0_Start>:


void Timer0_Start(uint8_t InitalTick)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	0f 92       	push	r0
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = InitalTick;
     d24:	e2 e5       	ldi	r30, 0x52	; 82
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	80 83       	st	Z, r24
}
     d2c:	0f 90       	pop	r0
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <Timer0_SetBusyWait>:


void Timer0_SetBusyWait(uint16_t Ticks)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	00 d0       	rcall	.+0      	; 0xd3a <Timer0_SetBusyWait+0x6>
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <Timer0_SetBusyWait+0x8>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <Timer0_SetBusyWait+0xa>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	9e 83       	std	Y+6, r25	; 0x06
     d44:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t Overflow_Number = Ticks / Timer0_OVF;
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	89 2f       	mov	r24, r25
     d4c:	99 27       	eor	r25, r25
     d4e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t inital_Tick_value = Timer0_OVF - (Ticks % Timer0_OVF);
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	81 95       	neg	r24
     d54:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ovf_flag=0;
     d56:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t i;
	Timer0_Start(inital_Tick_value);
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	0e 94 8c 06 	call	0xd18	; 0xd18 <Timer0_Start>
	for(i=0;i<=Overflow_Number;i++)
     d5e:	19 82       	std	Y+1, r1	; 0x01
     d60:	11 c0       	rjmp	.+34     	; 0xd84 <Timer0_SetBusyWait+0x50>
			 {
				 Timer0_CheckovfFlag(&ovf_flag);
     d62:	ce 01       	movw	r24, r28
     d64:	04 96       	adiw	r24, 0x04	; 4
     d66:	0e 94 57 06 	call	0xcae	; 0xcae <Timer0_CheckovfFlag>
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <Timer0_SetBusyWait+0x40>
				 while(ovf_flag==0)
				 {
					 Timer0_CheckovfFlag(&ovf_flag);
     d6c:	ce 01       	movw	r24, r28
     d6e:	04 96       	adiw	r24, 0x04	; 4
     d70:	0e 94 57 06 	call	0xcae	; 0xcae <Timer0_CheckovfFlag>
	uint8_t i;
	Timer0_Start(inital_Tick_value);
	for(i=0;i<=Overflow_Number;i++)
			 {
				 Timer0_CheckovfFlag(&ovf_flag);
				 while(ovf_flag==0)
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	88 23       	and	r24, r24
     d78:	c9 f3       	breq	.-14     	; 0xd6c <Timer0_SetBusyWait+0x38>
				 {
					 Timer0_CheckovfFlag(&ovf_flag);
				 }
				 Timer0_SetovfFlag();
     d7a:	0e 94 49 06 	call	0xc92	; 0xc92 <Timer0_SetovfFlag>
	uint8_t Overflow_Number = Ticks / Timer0_OVF;
	uint8_t inital_Tick_value = Timer0_OVF - (Ticks % Timer0_OVF);
	uint8_t ovf_flag=0;
	uint8_t i;
	Timer0_Start(inital_Tick_value);
	for(i=0;i<=Overflow_Number;i++)
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	99 81       	ldd	r25, Y+1	; 0x01
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	89 17       	cp	r24, r25
     d8a:	58 f7       	brcc	.-42     	; 0xd62 <Timer0_SetBusyWait+0x2e>
				 {
					 Timer0_CheckovfFlag(&ovf_flag);
				 }
				 Timer0_SetovfFlag();
			 }
}
     d8c:	26 96       	adiw	r28, 0x06	; 6
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <Timer0_OvfISR>:


void Timer0_OvfISR(void (*Callback)(void))
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	00 d0       	rcall	.+0      	; 0xda4 <Timer0_OvfISR+0x6>
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	89 83       	std	Y+1, r24	; 0x01
	Timer0_ovfCallback = Callback;
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	90 93 68 00 	sts	0x0068, r25
     db4:	80 93 67 00 	sts	0x0067, r24
}
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <__vector_11>:


/* Timer0 Overflow ISR*/
void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
     dc2:	1f 92       	push	r1
     dc4:	0f 92       	push	r0
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	0f 92       	push	r0
     dca:	11 24       	eor	r1, r1
     dcc:	2f 93       	push	r18
     dce:	3f 93       	push	r19
     dd0:	4f 93       	push	r20
     dd2:	5f 93       	push	r21
     dd4:	6f 93       	push	r22
     dd6:	7f 93       	push	r23
     dd8:	8f 93       	push	r24
     dda:	9f 93       	push	r25
     ddc:	af 93       	push	r26
     dde:	bf 93       	push	r27
     de0:	ef 93       	push	r30
     de2:	ff 93       	push	r31
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	Timer0_ovfCallback();
     dec:	e0 91 67 00 	lds	r30, 0x0067
     df0:	f0 91 68 00 	lds	r31, 0x0068
     df4:	09 95       	icall
}
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	ff 91       	pop	r31
     dfc:	ef 91       	pop	r30
     dfe:	bf 91       	pop	r27
     e00:	af 91       	pop	r26
     e02:	9f 91       	pop	r25
     e04:	8f 91       	pop	r24
     e06:	7f 91       	pop	r23
     e08:	6f 91       	pop	r22
     e0a:	5f 91       	pop	r21
     e0c:	4f 91       	pop	r20
     e0e:	3f 91       	pop	r19
     e10:	2f 91       	pop	r18
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <Timer0_CTCISR>:



void Timer0_CTCISR(void (*Callback)(void))
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	00 d0       	rcall	.+0      	; 0xe22 <Timer0_CTCISR+0x6>
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	9a 83       	std	Y+2, r25	; 0x02
     e28:	89 83       	std	Y+1, r24	; 0x01
	Timer0_CTCCallback = Callback;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	90 93 64 00 	sts	0x0064, r25
     e32:	80 93 63 00 	sts	0x0063, r24
}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <__vector_10>:


/* Timer0 CTC ISR*/
void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTCCallback();
     e6a:	e0 91 63 00 	lds	r30, 0x0063
     e6e:	f0 91 64 00 	lds	r31, 0x0064
     e72:	09 95       	icall
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <Timer2_Init>:
/* TIMER 2
 *
 **********************************************************************************************/

void Timer2_Init()
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
#if Timer2_Mode == NORMAL
	CLR_BIT(TCCR2,3);
     ea2:	a5 e4       	ldi	r26, 0x45	; 69
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e5 e4       	ldi	r30, 0x45	; 69
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	87 7f       	andi	r24, 0xF7	; 247
     eae:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,6);
     eb0:	a5 e4       	ldi	r26, 0x45	; 69
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e5 e4       	ldi	r30, 0x45	; 69
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 7b       	andi	r24, 0xBF	; 191
     ebc:	8c 93       	st	X, r24
#elif Timer2_prescaler == CLK_256
		CLR_BIT(TCCR2,0);
		SET_BIT(TCCR2,1);
		SET_BIT(TCCR2,2);
#elif Timer2_prescaler == CLK_1024
		SET_BIT(TCCR2,0);
     ebe:	a5 e4       	ldi	r26, 0x45	; 69
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e5 e4       	ldi	r30, 0x45	; 69
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	81 60       	ori	r24, 0x01	; 1
     eca:	8c 93       	st	X, r24
		SET_BIT(TCCR2,1);
     ecc:	a5 e4       	ldi	r26, 0x45	; 69
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e4       	ldi	r30, 0x45	; 69
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	82 60       	ori	r24, 0x02	; 2
     ed8:	8c 93       	st	X, r24
		SET_BIT(TCCR2,2);
     eda:	a5 e4       	ldi	r26, 0x45	; 69
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e5 e4       	ldi	r30, 0x45	; 69
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	84 60       	ori	r24, 0x04	; 4
     ee6:	8c 93       	st	X, r24
			#error("You chose Wrong clock type")
#endif


#if TIMER2_INTERRUPT ==	NO_INTERRUPT
		CLR_BIT(TIMSK,6);
     ee8:	a9 e5       	ldi	r26, 0x59	; 89
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e9 e5       	ldi	r30, 0x59	; 89
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8f 7b       	andi	r24, 0xBF	; 191
     ef4:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,7);
     ef6:	a9 e5       	ldi	r26, 0x59	; 89
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e9 e5       	ldi	r30, 0x59	; 89
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8f 77       	andi	r24, 0x7F	; 127
     f02:	8c 93       	st	X, r24
#else
			#error("You chose Wrong clock type")
#endif


}
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <Timer2_GetValue>:


uint8_t Timer2_GetValue(uint8_t *getvalue)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <Timer2_GetValue+0x6>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
	*getvalue = TCNT2;
     f18:	e4 e4       	ldi	r30, 0x44	; 68
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	e9 81       	ldd	r30, Y+1	; 0x01
     f20:	fa 81       	ldd	r31, Y+2	; 0x02
     f22:	80 83       	st	Z, r24
	return TCNT2;
     f24:	e4 e4       	ldi	r30, 0x44	; 68
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <Timer2_Stop>:


void Timer2_Stop()
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
			CLR_BIT(TCCR2,0);
     f3c:	a5 e4       	ldi	r26, 0x45	; 69
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e5 e4       	ldi	r30, 0x45	; 69
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8e 7f       	andi	r24, 0xFE	; 254
     f48:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,1);
     f4a:	a5 e4       	ldi	r26, 0x45	; 69
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e5 e4       	ldi	r30, 0x45	; 69
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8d 7f       	andi	r24, 0xFD	; 253
     f56:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,2);
     f58:	a5 e4       	ldi	r26, 0x45	; 69
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e5 e4       	ldi	r30, 0x45	; 69
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8b 7f       	andi	r24, 0xFB	; 251
     f64:	8c 93       	st	X, r24
}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <Timer2_SetCTC>:

void Timer2_SetCTC(uint8_t CompareValue)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = CompareValue;
     f78:	e3 e4       	ldi	r30, 0x43	; 67
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	80 83       	st	Z, r24
}
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <Timer2_SetovfFlag>:

void Timer2_SetovfFlag(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,6);
     f90:	a8 e5       	ldi	r26, 0x58	; 88
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e8 e5       	ldi	r30, 0x58	; 88
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 64       	ori	r24, 0x40	; 64
     f9c:	8c 93       	st	X, r24
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <Timer2_CheckovfFlag>:


void Timer2_CheckovfFlag(uint8_t *OverflowFlag)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <Timer2_CheckovfFlag+0x6>
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	9a 83       	std	Y+2, r25	; 0x02
     fb0:	89 83       	std	Y+1, r24	; 0x01
	*OverflowFlag = GET_BIT(TIFR,6);
     fb2:	e8 e5       	ldi	r30, 0x58	; 88
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	82 95       	swap	r24
     fba:	86 95       	lsr	r24
     fbc:	86 95       	lsr	r24
     fbe:	83 70       	andi	r24, 0x03	; 3
     fc0:	81 70       	andi	r24, 0x01	; 1
     fc2:	e9 81       	ldd	r30, Y+1	; 0x01
     fc4:	fa 81       	ldd	r31, Y+2	; 0x02
     fc6:	80 83       	st	Z, r24
}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <Timer2_SetCTCFlag>:

void Timer2_SetCTCFlag(void)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,7);
     fda:	a8 e5       	ldi	r26, 0x58	; 88
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e8 e5       	ldi	r30, 0x58	; 88
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	8c 93       	st	X, r24
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <Timer2_CheckCTCFlag>:

void Timer2_CheckCTCFlag(uint8_t *OverflowFlag)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <Timer2_CheckCTCFlag+0x6>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
	*OverflowFlag = GET_BIT(TIFR,7);
     ffc:	e8 e5       	ldi	r30, 0x58	; 88
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	88 1f       	adc	r24, r24
    1004:	88 27       	eor	r24, r24
    1006:	88 1f       	adc	r24, r24
    1008:	e9 81       	ldd	r30, Y+1	; 0x01
    100a:	fa 81       	ldd	r31, Y+2	; 0x02
    100c:	80 83       	st	Z, r24
}
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <Timer2_Start>:


void Timer2_Start(uint8_t InitalTick)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	0f 92       	push	r0
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = InitalTick;
    1024:	e4 e4       	ldi	r30, 0x44	; 68
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	80 83       	st	Z, r24
}
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <Timer2_SetBusyWait>:


void Timer2_SetBusyWait(uint16_t Ticks)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <Timer2_SetBusyWait+0x6>
    103a:	00 d0       	rcall	.+0      	; 0x103c <Timer2_SetBusyWait+0x8>
    103c:	00 d0       	rcall	.+0      	; 0x103e <Timer2_SetBusyWait+0xa>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t Overflow_Number = Ticks / Timer2_OVF;
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	89 2f       	mov	r24, r25
    104c:	99 27       	eor	r25, r25
    104e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t inital_Tick_value = Timer2_OVF - (Ticks % Timer2_OVF);
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	81 95       	neg	r24
    1054:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ovf_flag=0;
    1056:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t i;
	Timer2_Start(inital_Tick_value);
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	0e 94 0c 08 	call	0x1018	; 0x1018 <Timer2_Start>
	for(i=0;i<=Overflow_Number;i++)
    105e:	19 82       	std	Y+1, r1	; 0x01
    1060:	11 c0       	rjmp	.+34     	; 0x1084 <Timer2_SetBusyWait+0x50>
			 {
				 Timer2_CheckovfFlag(&ovf_flag);
    1062:	ce 01       	movw	r24, r28
    1064:	04 96       	adiw	r24, 0x04	; 4
    1066:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <Timer2_CheckovfFlag>
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <Timer2_SetBusyWait+0x40>
				 while(ovf_flag==0)
				 {
					 Timer2_CheckovfFlag(&ovf_flag);
    106c:	ce 01       	movw	r24, r28
    106e:	04 96       	adiw	r24, 0x04	; 4
    1070:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <Timer2_CheckovfFlag>
	uint8_t i;
	Timer2_Start(inital_Tick_value);
	for(i=0;i<=Overflow_Number;i++)
			 {
				 Timer2_CheckovfFlag(&ovf_flag);
				 while(ovf_flag==0)
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	88 23       	and	r24, r24
    1078:	c9 f3       	breq	.-14     	; 0x106c <Timer2_SetBusyWait+0x38>
				 {
					 Timer2_CheckovfFlag(&ovf_flag);
				 }
				 Timer2_SetovfFlag();
    107a:	0e 94 c4 07 	call	0xf88	; 0xf88 <Timer2_SetovfFlag>
	uint8_t Overflow_Number = Ticks / Timer2_OVF;
	uint8_t inital_Tick_value = Timer2_OVF - (Ticks % Timer2_OVF);
	uint8_t ovf_flag=0;
	uint8_t i;
	Timer2_Start(inital_Tick_value);
	for(i=0;i<=Overflow_Number;i++)
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	8f 5f       	subi	r24, 0xFF	; 255
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	99 81       	ldd	r25, Y+1	; 0x01
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	89 17       	cp	r24, r25
    108a:	58 f7       	brcc	.-42     	; 0x1062 <Timer2_SetBusyWait+0x2e>
				 {
					 Timer2_CheckovfFlag(&ovf_flag);
				 }
				 Timer2_SetovfFlag();
			 }
}
    108c:	26 96       	adiw	r28, 0x06	; 6
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <Timer2_OvfISR>:



void Timer2_OvfISR(void (*Timer2_Callback)(void))
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <Timer2_OvfISR+0x6>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
	Timer2_ovfCallback = Timer2_Callback;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	90 93 62 00 	sts	0x0062, r25
    10b4:	80 93 61 00 	sts	0x0061, r24
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <__vector_5>:

/* Timer0 Overflow ISR*/
void __vector_5(void)__attribute__((signal));
void __vector_5(void)
{
    10c2:	1f 92       	push	r1
    10c4:	0f 92       	push	r0
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	0f 92       	push	r0
    10ca:	11 24       	eor	r1, r1
    10cc:	2f 93       	push	r18
    10ce:	3f 93       	push	r19
    10d0:	4f 93       	push	r20
    10d2:	5f 93       	push	r21
    10d4:	6f 93       	push	r22
    10d6:	7f 93       	push	r23
    10d8:	8f 93       	push	r24
    10da:	9f 93       	push	r25
    10dc:	af 93       	push	r26
    10de:	bf 93       	push	r27
    10e0:	ef 93       	push	r30
    10e2:	ff 93       	push	r31
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	Timer2_ovfCallback();
    10ec:	e0 91 61 00 	lds	r30, 0x0061
    10f0:	f0 91 62 00 	lds	r31, 0x0062
    10f4:	09 95       	icall
}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <Timer2_CTCISR>:



void Timer2_CTCISR(void (*Timer2_Callback)(void))
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <Timer2_CTCISR+0x6>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
	Timer2_CTCCallback = Timer2_Callback;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	90 93 66 00 	sts	0x0066, r25
    1132:	80 93 65 00 	sts	0x0065, r24
}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <__vector_4>:


/* Timer0 CTC ISR*/
void __vector_4(void)__attribute__((signal));
void __vector_4(void)
{
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	2f 93       	push	r18
    114c:	3f 93       	push	r19
    114e:	4f 93       	push	r20
    1150:	5f 93       	push	r21
    1152:	6f 93       	push	r22
    1154:	7f 93       	push	r23
    1156:	8f 93       	push	r24
    1158:	9f 93       	push	r25
    115a:	af 93       	push	r26
    115c:	bf 93       	push	r27
    115e:	ef 93       	push	r30
    1160:	ff 93       	push	r31
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	Timer2_CTCCallback();
    116a:	e0 91 65 00 	lds	r30, 0x0065
    116e:	f0 91 66 00 	lds	r31, 0x0066
    1172:	09 95       	icall
}
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	ff 91       	pop	r31
    117a:	ef 91       	pop	r30
    117c:	bf 91       	pop	r27
    117e:	af 91       	pop	r26
    1180:	9f 91       	pop	r25
    1182:	8f 91       	pop	r24
    1184:	7f 91       	pop	r23
    1186:	6f 91       	pop	r22
    1188:	5f 91       	pop	r21
    118a:	4f 91       	pop	r20
    118c:	3f 91       	pop	r19
    118e:	2f 91       	pop	r18
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <Test1>:


volatile uint8_t count=0;

void Test1(void)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	 * Desired time = 500ms
	 * no. of over flow 16
	 * Initial value 189
	 */

	if (count == 10)
    11a2:	80 91 60 00 	lds	r24, 0x0060
    11a6:	8a 30       	cpi	r24, 0x0A	; 10
    11a8:	41 f4       	brne	.+16     	; 0x11ba <Test1+0x20>

		{
		 LED_OFF(LED_PORTB,7);
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	67 e0       	ldi	r22, 0x07	; 7
    11ae:	0e 94 9b 05 	call	0xb36	; 0xb36 <LED_OFF>
		 Timer0_Start(190);
    11b2:	8e eb       	ldi	r24, 0xBE	; 190
    11b4:	0e 94 8c 06 	call	0xd18	; 0xd18 <Timer0_Start>
    11b8:	0d c0       	rjmp	.+26     	; 0x11d4 <Test1+0x3a>
		}

		else if( count ==26)
    11ba:	80 91 60 00 	lds	r24, 0x0060
    11be:	8a 31       	cpi	r24, 0x1A	; 26
    11c0:	49 f4       	brne	.+18     	; 0x11d4 <Test1+0x3a>
		{
			LED_ON(LED_PORTB,7);
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	67 e0       	ldi	r22, 0x07	; 7
    11c6:	0e 94 7f 05 	call	0xafe	; 0xafe <LED_ON>
			Timer0_Start(216);
    11ca:	88 ed       	ldi	r24, 0xD8	; 216
    11cc:	0e 94 8c 06 	call	0xd18	; 0xd18 <Timer0_Start>
			count =0;
    11d0:	10 92 60 00 	sts	0x0060, r1
		}


		count++;
    11d4:	80 91 60 00 	lds	r24, 0x0060
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	80 93 60 00 	sts	0x0060, r24
}
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <main>:

void main()

{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62

	 GlobalInerruptEnable();
    11ec:	0e 94 55 05 	call	0xaaa	; 0xaaa <GlobalInerruptEnable>
	 LED_Init(LED_PORTB,5);
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	65 e0       	ldi	r22, 0x05	; 5
    11f4:	0e 94 63 05 	call	0xac6	; 0xac6 <LED_Init>
	 LED_Init(LED_PORTB,7);
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	67 e0       	ldi	r22, 0x07	; 7
    11fc:	0e 94 63 05 	call	0xac6	; 0xac6 <LED_Init>

	 	 LED_ON(LED_PORTB,5);
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	65 e0       	ldi	r22, 0x05	; 5
    1204:	0e 94 7f 05 	call	0xafe	; 0xafe <LED_ON>
	 	 Timer0_Init();
    1208:	0e 94 d2 05 	call	0xba4	; 0xba4 <Timer0_Init>
	 	 Timer0_Start(216);
    120c:	88 ed       	ldi	r24, 0xD8	; 216
    120e:	0e 94 8c 06 	call	0xd18	; 0xd18 <Timer0_Start>
	 	 Timer0_OvfISR(&Test1);
    1212:	8d ec       	ldi	r24, 0xCD	; 205
    1214:	98 e0       	ldi	r25, 0x08	; 8
    1216:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Timer0_OvfISR>

	 	 Timer2_Init();
    121a:	0e 94 4d 07 	call	0xe9a	; 0xe9a <Timer2_Init>


	 while(1)
	 {
		 LED_ON(LED_PORTB,5);
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	65 e0       	ldi	r22, 0x05	; 5
    1222:	0e 94 7f 05 	call	0xafe	; 0xafe <LED_ON>
		 Timer2_SetBusyWait(2343);
    1226:	87 e2       	ldi	r24, 0x27	; 39
    1228:	99 e0       	ldi	r25, 0x09	; 9
    122a:	0e 94 1a 08 	call	0x1034	; 0x1034 <Timer2_SetBusyWait>
		 LED_OFF(LED_PORTB,5);
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	65 e0       	ldi	r22, 0x05	; 5
    1232:	0e 94 9b 05 	call	0xb36	; 0xb36 <LED_OFF>
		 Timer2_SetBusyWait(3906);
    1236:	82 e4       	ldi	r24, 0x42	; 66
    1238:	9f e0       	ldi	r25, 0x0F	; 15
    123a:	0e 94 1a 08 	call	0x1034	; 0x1034 <Timer2_SetBusyWait>
    123e:	ef cf       	rjmp	.-34     	; 0x121e <main+0x3a>

00001240 <_exit>:
    1240:	f8 94       	cli

00001242 <__stop_program>:
    1242:	ff cf       	rjmp	.-2      	; 0x1242 <__stop_program>
